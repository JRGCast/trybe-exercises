# Interfaces
# A Programação Orientada a Objetos dá muitos nomes para as coisas, e agora vamos aprender mais um! No exemplo acima nós definimos uma classe abstrata com um método abstrato . Vemos que a classe a ser especializada, a SalesReport , definiu a assinatura de uma função, mas não a sua lógica! Ou seja: todas as classes herdeiras poderiam colocar ali a lógica que quisessem, contanto que utilizassem a mesma assinatura de função.
# Um objeto deve ser capaz de receber mensagens. As funções que você chama são as mensagens enviadas a ele. Quando você dá a um objeto uma função você define uma mensagem que ele será capaz de receber e interpretar. Ao conjunto de mensagens que um objeto pode interpretar é dado o nome de Interface !
# Como assim? Pense da seguinte forma: quando duas pessoas de países diferentes conversam, muitas vezes não é possível conversarem em seus idiomas nativos. Pode ser que um Japonês e um Brasileiro, por exemplo, só consigam se comunicar em Inglês. Você só é capaz de se comunicar com a outra pessoa se disser algo que ela é capaz de entender . Com objetos, é a mesma coisa: a interface de um objeto representa o conjunto de mensagens que ele é capaz de entender! Para a classe SalesReport , sua interface é composta pelas funções build e serialize .
# Lembra que falamos que uma vantagem da Programação Orientada a Objetos é que só precisamos saber como instanciar um objeto e quais funções ele tem ? Falando a mesma coisa de maneira mais técnica, podemos dizer que a Programação Orientada a Objetos garante interfaces bem definidas para as várias partes do nosso programa se comunicarem sem que se precise saber como, internamente, cada parte funciona . Se suas interfaces tem nomes bons e lógicas bem definidas, fica fácil reusar o código que você escreveu! Não é preciso entender como ele funciona, só como me comunico com ele.
