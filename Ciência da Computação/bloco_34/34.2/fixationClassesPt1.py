# Heran√ßa - Especializa√ß√£o de comportamentos
# N√£o se deve ter medo de criar objetos. N√£o importa qu√£o pequenos sejam, √© a separa√ß√£o de responsabilidades que faz o paradigma brilhar
# N√≥s queremos estender nosso c√≥digo sem modificar o que j√° existe . Leia o c√≥digo abaixo! Ele faz a mesma coisa que o c√≥digo anterior, mas est√° refatorado. Ele usa, para resolver o nosso problema, os conceitos de classes abstratas, m√©todos abstratos e o conceito de heran√ßa .

from abc import ABC, abstractmethod
import json
import csv


class SalesReport(ABC):
    def __init__(self, export_file):
        self.export_file = export_file

    def build(self):
        """ Aqui colocamos a l√≥gica para a entidade 'se criar',
         ou seja, criar um relat√≥rio imprim√≠vel. Por simplicidade,
         vamos omitir essa l√≥gica nos exemplos! """
        return [{'Coluna 1': 'Dado 1',
                 'Coluna 2': 'Dado 2',
                 'Coluna 3': 'Dado 3'
                 },
                {
            'Coluna 1': 'Dado A',
            'Coluna 2': 'Dado B',
            'Coluna 3': 'Dado C'
                }]

    @abstractmethod
    def serialize(self):
        # Vamos gerar, aqui, o nosso relat√≥rio em formato JSON
        raise NotImplementedError
      
    @abstractmethod
    def get_length(self):
        raise NotImplementedError


class SalesReportJSON(SalesReport):
    def serialize(self):
        with open(self.export_file + '.json', 'w') as file:
            json.dump(self.build(), file)


relatorio_de_vendas = SalesReportJSON('meu_relatorio')
relatorio_de_vendas.serialize()

# üí° Como boa pr√°tica, cada classe deve ser definida em seu pr√≥prio arquivo! Para nossos exerc√≠cios isso n√£o √© necess√°rio
# Heran√ßa nada mais √© do que especializar o comportamento de uma classe. A classe herdeira √© tudo que a classe ascendente √© e um pouco mais! Pense assim:
# Se FileCompressor √© a classe ascendente, ZipFileCompressor e TarFileCompressor s√£o classes herdeiras! Ambas s√£o um tipo espec√≠fico de compressor de arquivos.
# Se DatabaseConnector √© a classe ascendente, MySQLConnector e MongoConnector s√£o as classes hedeiras! Ambas s√£o um tipo espec√≠fico de conector de banco de dados.
# Se Model √© a classe ascendente, UserModel √© a classe herdeira! √â um tipo espec√≠fico de model .
# Se Service √© a classe ascendente, AuthenticationService √© a classe herdeira! √â um tipo espec√≠fico de service .
# üí° Lembre-se: O Model Service Controller √© uma arquitetura que usa como base a Programa√ß√£o Orientada a Objetos!
# A Programa√ß√£o Orientada a Objetos, portanto, te d√° o poder de criar classes herdeiras que especializam, mais e mais, o comportamento das classes ascendentes! N√£o h√° limite pra quantidade de classes herdeiras que uma classe pode ter, mas √© crucial que tais classes sempre sejam uma especializa√ß√£o de comportamento! J√° j√° vamos ver o porqu√™.

# No Python, definimos uma classe como herdeira da outra na linha que a define, como acima em class SalesReportJSON(SalesReport) . A l√≥gica √©: class MinhaClasseHerdeira(ClasseAscendente)
# Exerc√≠cio de Fixa√ß√£o
# Antes de prosseguirmos para entender o que √© aquele @abstractmethod e aquele (ABC) , vamos fixar o entendimento de heran√ßa! Implemente uma classe SalesReportCSV que seja herdeira da classe SalesReport , da mesma forma que fizemos com a SalesReportJSON . Para testar seu funcionamento, instancie-a e chame sua fun√ß√£o serialize .
# üí° Lembre-se de tirar sua d√∫vida conosco se travar em algum momento!


class SalesReportCSV(SalesReport):
    def serialize(self):
        with open(self.export_file + '.csv', 'w') as file:
            headers = ["Coluna 1", "Coluna 2", "Coluna 3"]
            csv_writer = csv.DictWriter(file, headers)
            csv_writer.writeheader()
            for item in self.build():
                csv_writer.writerow(item)

meu_relatorio2 = SalesReportCSV('meu_relatorio2') 
meu_relatorio2.serialize()
# Classes Abstratas
# No exemplo acima vimos, al√©m da heran√ßa, outras duas coisas meio confusas! Vimos que a classe ascendente principal parece ser herdeira de outra, uma tal classe ABC . Al√©m disso, a fun√ß√£o serialize da classe ascendente est√° marcada como @abstractmethod e n√£o tem c√≥digo algum, ao contr√°rio da classe herdeira. O que raios √© isso? ü§î
# Serializar √© o processo de mudar o formato dos seus dados para que possam ser armazenados ou enviados para serem, depois, convertidos de volta √† sua forma original Fonte: Dicion√°rio de Cambridge
# At√© agora, sempre criamos uma classe para que pud√©ssemos criar instancias dela para usarmos, n√£o √© mesmo? Pois √©! Mas pense no exemplo acima: temos uma classe ascendente "geral", a SalesReport , e uma classe herdeira especifica, a SalesReportJSON . A partir do momento que temos comportamentos gerais e comportamentos especializados, ainda faz sentido usar a classe gen√©rica? . Pensem assim: o Relat√≥rio de Vendas precisa, obrigatoriamente, ter um formato. Temos uma classe geral SalesReport que define comportamentos dos relat√≥rios de venda e suas classes herdeiras especializam-na para imprimirem o relat√≥rio em diferentes formatos. N√≥s nunca vamos ter um relat√≥rio geral, s√≥ um especializado!
# Nesse caso, ent√£o, n√£o faz sentido instanciarmos um objeto da classe SalesReport . Quando esse √© o caso, dizemos que essa √© uma classe abstrata ! Ou seja: classe abstrata √© a classe que n√£o pode ser instanciada nunca! E o m√©todo abstrato √©... a mesma coisa! √â um m√©todo que nunca pode ser chamado diretamente. A classe SalesReport define o m√©todo serialize para deixar n√≠tido que todo relat√≥rio de vendas deve ter uma forma de se serializar, mas ela mesma, por ser geral, n√£o √© serializ√°vel. Assim sendo, a classe SalesReport precisa definir a assinatura do m√©todo (nome e par√¢metros), mas ele s√≥ ser√° chamado sem erros se uma classe herdeira o implementar. No contexto de Programa√ß√£o Orientada a Objetos, pense que coisas abstratas s√£o coisas criadas para serem especializadas por classes herdeiras!
# Exerc√≠cio de Fixa√ß√£o
# Defina na classe SalesReport um segundo m√©todo abstrato chamado get_length que retorna quantos itens tem no relat√≥rio. Tente chamar esse m√©todo a partir da classe herdeira que n√£o implementa esse m√©todo e veja o erro que voc√™ recebe. Tente instanciar a SalesReport tamb√©m! Depois disso, implemente uma l√≥gica qualquer para esse m√©todo em uma das classes herdeiras e verifique que j√° √© poss√≠vel instanci√°-la e at√© chamar o m√©todo!
# acrescentado m√©todo abstrato get_length √† linha 33

# meu_relatorio3 = SalesReport() 
# print(meu_relatorio.get_length())
# Em ambos h√° o erro: TypeError: Can't instantiate abstract class SalesReportJSON with abstract methods get_length
