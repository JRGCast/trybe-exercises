# Liskov Substitution Principle
# Lembra dos princ√≠pios S.O.L.I.D.? Este √© o L, o Princ√≠pio de Substitui√ß√£o de Liskov . Vamos botar a m√£o na massa com um exemplo bem robusto; s√£o nestes exemplos que a organiza√ß√£o vale mais a pena! Bora?
# Suponha que o seu time de desenvolvimento est√° trabalhando em um software que controla os acessos √† API do seu servi√ßo. Voc√™ est√° respons√°vel por manter um c√≥digo cujo dever √© gerar uma token de acesso, que o front utilizar√° para validar todas as requisi√ß√µes que receber de clientes.
# Sua empresa cobra clientes por n√∫mero de requisi√ß√µes, ent√£o voc√™ precisar√° registrar em um banco a quantidade de vezes que uma determinada token foi utilizada para acessar o servi√ßo. Por√©m, o seu time considerou os seguintes fatos:
# Nossa infra-estrutura utiliza um servidor SQL, cuja inser√ß√£o tende a ser mais lenta.
# √â normal que clientes acessem o servi√ßo milhares de vezes em um intervalo de 30 minutos, e depois fiquem v√°rios dias sem utilizar.
# Ent√£o voc√™s decidiram guardar as contagens de requisi√ß√µes em um banco de dados cache , que fica armazenado por inteiro na mem√≥ria RAM de uma m√°quina! Por estar nessa mem√≥ria, ele √© super r√°pido mas n√£o pode ser muito grande. Decide-se que o valor √© armazenado no banco em cache e, ap√≥s o valor ficar uma hora inteira sem ser atualizado, ele √© enviado para o banco SQL.
# Sua colega Bia hoje trabalha no servi√ßo, e utiliza a seguinte classe para acessar o banco de dados SQL:

import pysql  # Encare essa lib como fict√≠cia!

class SqlConnector:
    # ...

    def __init__(self, address, port):
        print(f'criada uma conex√£o em {address}:{port}')
        self.db = pysql.connect(address, port)

    def get_count(token):
        query = f'SELECT count FROM access WHERE token={token};--'

    def count_request(token):
        query = f'UPDATE access SET count = count+=1 WHERE token={token};--'
        self.db.execute(query)

# Nosso dever √© implementar o acesso ao Redis, nosso banco de dados cache , e oferecer √† Bia uma interface amig√°vel e f√°cil de utilizar. Ou seja, fun√ß√µes que ela possa chamar em seu c√≥digo de forma simples.
# (Redis √© um banco de dados em mem√≥ria, que utiliza uma estrutura chave-valor. Saiba mais indo nos recursos adicionais!)
# Assim, criamos a seguinte classe, implementando a l√≥gica de cache:

import pyredis  # Encare essa lib como fict√≠cia tamb√©m!

class RedisConnector:
    def __init__(self, address, port):
        print(f'criada uma conex√£o em {address}:{port}')
        self.db = pyredis.connect(address, port)

    def get_count(token):
        result = self.search(token)
        amount = result.get("access_count", None)
        return amount

    def update_count(token):
        amount = self.get_count()
        if amount is None:
            self.db.insert({token:1})
        else:
            self.db.insert({token: amount+1})

# Por√©m, ao analizar este c√≥digo a nossa colega Bia n√£o gostou! Ela disse:
# Mas a√≠ vamos ter que refatorar muita coisa! Eu uso o conector SQL em muitos lugares, e preciso ser capaz de usar o conector Redis em todos eles! Se o nome das fun√ß√µes mudarem eu vou ter que refatorar o c√≥digo inteiro! E se pud√©ssemos chamar os dois conectores da mesma forma, nos mesmos lugares? Isso facilitaria demais.
# Com este feedback, refatoramos as classes conectoras. Vamos criar uma classe Connector, que abstrai os m√©todos que devemos utilizar numa interface , e os dois conectores ser√£o herdeiros desta classe. Veja:

from abc import ABC, abstractmethod

class Connector(ABC):
    @abstractmethod
    def get_count(token):
        pass

    @abstractmethod
    def count_request():
        pass

class RedisConnector(Connector):
    def __init__(self, address, port):
        # A l√≥gica da conex√£o ao banco Redis
        pass

    def get_count(token):
        # A l√≥gica de acesso ao banco Redis
        pass

    def count_request(token):
        # A l√≥gica de acesso ao banco Redis
       pass

class SqlConnector(Connector):
    def __init__(self, address, port):
        # A l√≥gica da conex√£o ao banco SQL
        pass

    def get_count(token):
        # A l√≥gica de acesso ao banco SQL
        pass

    def count_request(token):
        # A l√≥gica de acesso ao banco SQL
        pass

# Agora, uma classe que precisar acessar o banco pode receber como Connector tanto uma classe quanto a outra! Veja um exemplo de uso:

import analyzer

# o par√¢metro database √© um connector
def analyze_data(token, database, data):
    try:
        report = analyzer.complete_report(data)
        database.count_request(token)  # Cliente receber√° cobran√ßa
        return report

    # Se a database n√£o tiver o m√©todo count_request, vai lan√ßar o erro
    # AttributeError -- e a gente deixa o programa travar se isso acontecer.
    except analyzer.InvalidDataException:
        # A gente lida apenas com InvalidDataException, que √© um erro
        # esperado quando o relat√≥rio n√£o estiver pronto.
        return  # Cliente n√£o receber√° cobran√ßa, pois n√£o geramos o relat√≥rio

# Note que, dentro deste c√≥digo, n√£o conseguimos distinguir qual conector estamos usando. Tudo o que nos interessa aqui √© que ela tem um m√©todo count_request() que recebe a token de acesso. Assim, se estivermos trabalhando nesta parte da aplica√ß√£o, podemos ter certeza de a inser√ß√£o em banco foi feita, sem nos preocuparmos com a l√≥gica de cache que est√° acontecendo por tr√°s. Nossa colega Bia conseguir√° trabalhar de forma muito mais eficiente.
# üéâ Acabamos de utilizar o L da arquitetura SOLID!
# L iskov substitution principle ( Princ√≠pio de substitui√ß√£o de Liskov ): objetos em um programa devem ser substitu√≠veis por outros de suas classes herdeiras, sem que isso quebre nada. Isso significa que, para a substitui√ß√£o ser poss√≠vel, os subtipos devem seguir a interface de um tipo base;
# Ou seja, classes herdeiras devem sempre respeitar a interface de suas classes ascendentes! Elas podem especializar comportamentos, mas nunca remov√™-los! Caso contr√°rio seu c√≥digo fica cada vez mais dif√≠cil de usar, reusar e entender o que se faz! Agora, a Bia continuar√° fazendo suas chamadas da mesma forma, sem refatorar seu c√≥digo. Esta √© a parte legal da orienta√ß√£o a objetos bem feita!
# E n√£o precisamos, lembrem, escrever um c√≥digo ruim e depois refatorar (embora, fatalmente, isso v√° acontecer √†s vezes, hehe); se lembrarmos dos princ√≠pios S.O.L.I.D. enquanto estivermos decidindo como as classes devem ser, j√° pulamos muitos desses passos de refatora√ß√£o e j√° teremos, de cara, um c√≥digo muito melhor.
# Por√©m, nenhum c√≥digo √© perfeito. A abstra√ß√£o e as boas pr√°ticas servem para ajudar, mas repito: N√£o existe bala de prata . O bom senso e a experi√™ncia s√£o muito importantes tamb√©m. No fim, o objetivo √© ter um c√≥digo simples.