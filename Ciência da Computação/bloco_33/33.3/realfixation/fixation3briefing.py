# Exercícios de fixação
# Agora que conhecemos todos os 5 princípios S.O.L.I.D., relembre cada um deles, e reflita como todos eles se complementam para nos ajudar a escrever um código que, desde o início já precisará de menos refatorações conforme o sistema cresce e muda ao longo do tempo. Lembre-se deles:
# S - Single Responsability Principle - Princípio da Responsabilidade Única
# O - Open/Closed - Aberto para extensão, fechado para modificação
# L - Liskov's Substitution Principle - Principio da Substituição de Liskov
# I - Interface Segregation Principle - Principio da Segregação de Interfaces
# D - Dependency Inversion - Inversão de Dependências (ou: use composições!)

# Padrão de Projeto é uma solução geral para um problema que ocorre com frequência dentro de um determinado contexto no projeto de software . Desde a década de 70, cientistas da computação perceberam que, ainda que em contextos diferentes, algumas soluções de problemas se repetiam em vários softwares . Visando facilitar a reutilização do desenho da solução e a comunicação, assim como melhorar a documentação e compreensão de um sistema, essa comunidade de cientistas começou a catalogar estes padrões.
# Para deixar tudo mais tangível, responda à seguinte pergunta: "Quantas aplicações no mundo precisam iterar sobre uma lista de elementos?" Certamente milhares, senão milhões, correto? Eventualmente se propôs uma forma padronizada de implementar a solução para este problema, e tal proposta foi adotada, e este é o padrão de projeto conhecido como iterator . Ao receber uma lista de entidades , uma classe que implementa o padrão de projeto iterator deve ter uma interface específica: por exemplo, uma função next que retorna o próximo elemento da dita lista.
# Não interessa se a sua lista é em formato de array , de árvore, se é uma lista de inteiros, objetos ou o que for. Ao garantir que sua classe possui um iterador , você garante que ela tem uma função next que vai acessar o próximo elemento da sua lista. A forma de fazer isso é você quem define. Ao seguir o padrão de projeto, você organiza o seu código - e o seu raciocínio - de uma forma pensada, estudada e comprovadamente eficaz.
# Lista com 21 padrões de projetos, cada um com sua ilustração
# Lista com vários padrões de projeto. Imagem extraída de www.refactoring.guru/pt-br/design-patterns/catalog
# O exemplo do iterator é um exemplo mais básico do que padrões de projeto são, mas ilustra bem o seu propósito: organizar seu código e raciocínio de formas eficazes, comprovadamente boas e (praticamente) universalmente aceitas. Ao se deparar com um determinado problema que se encaixa na definição de um padrão de projeto, busque o padrão de projeto para saber uma forma boa de resolver esse problema.
# Um padrão é definido e documentado com um nome, o problema que busca resolver, uma solução dada por ele e as consequências sobre esta escolha. São documentados em formas de explicações e diagramas abstratos, possibilitando assim a utilização em diferentes contextos. Quando falamos de Padrões de projeto , é impossível deixar de falar sobre o livro da 'gangue dos quatro' . Hoje em dia, porém, muitos outros padrões estão documentados em diversas outras literaturas. É importante conhecer diferentes padrões e onde se aplicam, mas não fique preso a eles. Outros padrões podem emergir dos seus códigos e nem sempre estarão documentados.