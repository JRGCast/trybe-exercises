# Agora a pr√°tica
# Vamos colocar tudo o que vimos at√© agora em pr√°tica. Em todos os exerc√≠cios, crie fun√ß√µes para solucionar os problemas. Tenho certeza que voc√™s j√° viram isso. üòÜ
# Exerc√≠cio 1: Crie uma fun√ß√£o que receba dois n√∫meros e retorne o maior deles.
def return_bigger(x, y):
  if(x > y): return x
  else: return y

# Exerc√≠cio 2: Calcule a m√©dia aritm√©tica dos valores contidos em uma lista.
# ATEN√á√ÉO SEMPRE TENHA MUITA ATEN√á√ÉO √Ä IDENTA√á√ÉO EM PYTHON
def list_aritmed(list):
    total=0
    for element in list:
      total += element
    return total / len(list)

# Exerc√≠cio 3: Fa√ßa um programa que, dado um valor n qualquer, tal que n > 1, imprima na tela um quadrado feito de asteriscos de lado de tamanho n. Por exemplo:
# n = 5
# *****
# *****
# *****
# *****
# *****
# # ü¶ú Dica: A fun√ß√£o print aceita um par√¢metro nomeado end que pode ser utilizado para imprimir sem a quebra de linha. Por exemplo, print(4, end="") e print(2) ir√° imprimir 42 e depois quebrar a linha.
# Sentiu a√≠ um certo dejavu? üòÅ

def ast_square(num):
  for index in range(num):
    print('*' * num)

# Exerc√≠cio 4: Crie uma fun√ß√£o que receba uma lista de nomes e retorne o nome com a maior quantidade de caracteres. Por exemplo, para ["Jos√©", "Lucas", "N√°dia", "Fernanda", "Cairo", "Joana"] , o retorno deve ser "Fernanda" .
# # ü¶ú Uma dica: Utilize a fun√ß√£o len() para verificar o tamanho do nome.
def find_biggest_name(names):
    biggest_name = names[0]
    for name in names:
        if len(name) > len(biggest_name):
            biggest_name = name
    return biggest_name

# Exerc√≠cio 5: Considere que a cobertura da tinta √© de 1 litro para cada 3 metros quadrados e que a tinta √© vendida em latas de 18 litros, que custam R$ 80,00. Crie uma fun√ß√£o que retorne dois valores em uma tupla contendo a quantidade de latas de tinta a serem compradas e o pre√ßo total a partir do tamanho de uma parede(em m¬≤).
def paint(m2):
  if(m2) < 54: return "1, Custo: R$80,00"
  else:
    can_price = 80
    required_liters = m2 / 3
    required_cans = required_liters // 18
    if required_liters % 18:
        required_cans += 1
    return int(required_cans), f"Custo: {required_cans * can_price}"

# Exerc√≠cio 6: Crie uma fun√ß√£o que receba os tr√™s lado de um tri√¢ngulo e informe qual o tipo de tri√¢ngulo formado ou "n√£o √© triangulo" , caso n√£o seja poss√≠vel formar um tri√¢ngulo.
# # ü¶ú Dica:
# 
#   Tr√™s lados formam um tri√¢ngulo quando a soma de quaisquer dois lados for maior que o terceiro;
#   Tri√¢ngulo Equil√°tero: tr√™s lados iguais;
#   Tri√¢ngulo Is√≥sceles: quaisquer dois lados iguais;
#   Tri√¢ngulo Escaleno: tr√™s lados diferentes.

def type_of_triangle(side1, side2, side3):
    is_triangle = (
            side1 + side2 > side3 and
            side2 + side3 > side1 and
            side1 + side3 > side2
    )
    if not is_triangle:
        return "n√£o √© tri√¢ngulo"
    elif side1 == side2 == side3:
        return "equil√°tero"
    elif side1 == side2 or side2 == side3 or side1 == side3:
        return "is√≥sceles"
    else:
        return "escaleno"

# B√¥nus
# Exerc√≠cio 1: Dada uma lista, descubra o menor elemento. Por exemplo, [5, 9, 3, 19, 70, 8, 100, 2, 35, 27] deve retornar 3.

def minimum(numbers):
    smaller = number[0]
    for number in numbers:
        if number < smaller:
            smaller = number
    return smaller
# ü¶ú Dica: a fun√ß√£o min j√° existe nativamente no Python! Trabalhando em Python, sempre compensa pesquisar uma solu√ß√£o primeiro porque este brinquedo vem com todos os acess√≥rios inclusos!

def minimum(numbers):
   return min(numbers)

# ou mesmo
minimum = min

# Exerc√≠cio 2: Fa√ßa um programa que, dado um valor n qualquer, tal que n > 1, imprima na tela um tri√¢ngulo ret√¢ngulo com n asteriscos de base. Por exemplo, para n=5 o tri√¢ngulo ter√° 5 asteriscos na base:

# n = 5

# *
# **
# ***
# ****
# *****

def draw_triangle(n):
    for row in range(1, n + 1):
        print(row * '*')

# Exerc√≠cio 3: Crie uma fun√ß√£o que receba um n√∫mero inteiro N e retorne o somat√≥rio de todos os n√∫meros de 1 at√© N. Por exemplo, para N = 5, o valor esperado ser√° 15.

def summation(limit):
    total = 0
    for number in range(1, limit + 1):
        total += number
    return total
# ü¶ú Dica: a fun√ß√£o sum j√° existe nativamente no Python!

def summation(limit):
    return sum(range(1, limit + 1))

# Exerc√≠cio 4: Um posto est√° vendendo combust√≠veis com a seguinte tabela de descontos:

#   √Ålcool:
#     - At√© 20 litros, desconto de 3% por litro;
#     - Acima de 20 litros, desconto de 5% por litro.
#   Gasolina:
#     - At√© 20 litros, desconto de 4% por litro;
#     - Acima de 20 litros, desconto de 6% por litro.
# Escreva uma fun√ß√£o que receba o n√∫mero de litros vendidos, o tipo de combust√≠vel (codificado da seguinte forma: A - √°lcool, G - gasolina), e retorne o valor a ser pago pelo cliente, sabendo-se que o pre√ßo do litro da gasolina √© R$ 2,50, e o pre√ßo do litro do √°lcool √© R$ 1,90.

def fuel_price(type, liters):
    if type == "A":
        price = 1.90
        discount = 0.03
        if liters > 20:
            discount = 0.05
    elif type == "G":
        price = 2.50
        discount = 0.04
        if liters > 20:
            discount = 0.06
    total = price * liters
    total -= total * discount
    return total
