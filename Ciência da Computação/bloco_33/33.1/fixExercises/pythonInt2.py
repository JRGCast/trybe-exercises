# Inicialize uma vari√°vel a = 5 , comande type(a) e observe o retorno. # Resultado √© <class 'int'>;
# üí° O m√©todo type(operando) corresponde ao operador typeof operando do JavaScript.

# O segundo tipo num√©rico √© o float , tamb√©m conhecido por ponto flutuante, que representa um n√∫mero decimal ou fracion√°rio.
# Inicialize uma vari√°vel a = 5.0 , comande type(a) e observe o retorno. # Resultado √© <class 'float'>

# Como novidade e √∫ltimo tipo num√©rico, temos o complex .
# J√° vimos como representar n√∫meros inteiros ou fracion√°rios, mas sabia que n√∫meros complexos podem ser representados tamb√©m?
# Basta colocar o n√∫mero real acrescido da sua parte imagin√°ria, trocando o i por j.
3 + 4j  # sa√≠da: (3+4j)
# Opera√ß√µes matem√°ticas podem ser feitas da mesma maneira com n√∫meros complexos.
(3 + 4j) + 4  # sa√≠da: (7+4j)
# Inicialize uma vari√°vel a = 5j , comande type(a) e observe o retorno. # Resultado √© <class 'complex'>

# Al√©m dos tipos num√©ricos, temos o tipo de sequ√™ncia de texto str , que representa uma cadeia de caracteres ou, como popularmente conhecida, uma string. As strings s√£o definidas envolvendo um valor com aspas simples ou duplas.

# Os valores booleanos True e False pertencem ao tipo embutido bool . Aqui devemos ficar atentos ao in√≠cio mai√∫sculo dessas palavras reservadas.
# E temos ainda estruturas do tipo sequ√™ncia( list , tuple , range ), conjuntos( set , frozenset ), mapeamento( dict ), sequ√™ncias bin√°rias( bytes , bytearray , memoryview ) e mais um monte! üòì

fruits = ["orange", "apple", "grape", "pineapple"]  # elementos s√£o definidos separados por v√≠rgula, envolvidos por colchetes

fruits[0]  # o acesso √© feito por indices iniciados em 0

fruits[-1]  # o acesso tamb√©m pode ser negativo

fruits.append("banana")  # adicionando uma nova fruta

fruits.remove("pineapple")  # removendo uma fruta

fruits.extend(["pear", "melon", "kiwi"])  # acrescenta uma lista de frutas a lista original

fruits.index("apple")  # retorna o √≠ndice onde a fruta est√° localizada, neste caso 1 em seu programa

fruits.sort()  # ordena a lista de frutas ATEN√á√ÉO: O m√©todo sort com n√∫meros n√£o precisa da frescuragem do JS em n√∫meros acima de 9

trybe_course = ["Introdu√ß√£o", "Front-end", "Back-end"]
# üé® Fun√ß√µes e vari√°veis devem ser nomeadas com letras min√∫sculas e underscore, caso tenham mais de uma palavra: minha_variavel.

# Exerc√≠cio 5: Adicione o elemento "Ci√™ncia da Computa√ß√£o" √† lista.
print(trybe_course)
trybe_course.append("Ci√™ncia da Computa√ß√£o")
print(trybe_course)

# Exerc√≠cio 6: Acesse e altere o primeiro elemento da lista para "Fundamentos".
trybe_course[0] = "Fundamentos"
print(trybe_course)

# Tuplas (tuple)
# S√£o similares a listas, por√©m n√£o podem ser modificados durante a execu√ß√£o do programa.
# Sintaxe:
# Copiar
user = ("C√°ssio", "Botaro", 42)  # elementos s√£o definidos separados por v√≠rgula, envolvidos por parenteses

user[0]  # acesso tamb√©m por √≠ndices

# tentar reatribuir uma tupla acontece: user[0] = 'Sha' TypeError: 'tuple' object does not support item assignment

# Conjuntos (set)
# Conjunto de elementos √∫nicos e n√£o ordenados. Como conjuntos, implementam opera√ß√µes de uni√£o, intersec√ß√£o e outras.
# Sintaxe:

permissions = {"member", "group"}  # elementos separados por v√≠rgula, envolvidos por chaves

permissions.add("root")  # adiciona um novo elemento ao conjunto

permissions.add("member")  # como o elemento j√° existe, nenhum novo item √© adicionado ao conjunto

permissions.union({"user"})  # retorna um conjunto resultado da uni√£o

permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersec√ß√£o dos conjuntos

permissions.difference({"user"})  # retorna a diferen√ßa entre os dois conjuntos

# Exerc√≠cio 7: Um conjunto ou set pode ser inicializado utilizando-se tamb√©m o m√©todo set() . Inicialize uma vari√°vel com essa fun√ß√£o var = set() e adicione seu nome ao conjunto utilizando um dos m√©todos vistos acima. Depois, imprima a vari√°vel e confira se o retorno √©: {'seu_nome'}.
