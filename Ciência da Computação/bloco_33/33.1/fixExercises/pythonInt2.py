# Inicialize uma vari√°vel a = 5 , comande type(a) e observe o retorno. # Resultado √© <class 'int'>;
# üí° O m√©todo type(operando) corresponde ao operador typeof operando do JavaScript.

# O segundo tipo num√©rico √© o float , tamb√©m conhecido por ponto flutuante, que representa um n√∫mero decimal ou fracion√°rio.
# Inicialize uma vari√°vel a = 5.0 , comande type(a) e observe o retorno. # Resultado √© <class 'float'>

# Como novidade e √∫ltimo tipo num√©rico, temos o complex .
# J√° vimos como representar n√∫meros inteiros ou fracion√°rios, mas sabia que n√∫meros complexos podem ser representados tamb√©m?
# Basta colocar o n√∫mero real acrescido da sua parte imagin√°ria, trocando o i por j.
3 + 4j  # sa√≠da: (3+4j)
# Opera√ß√µes matem√°ticas podem ser feitas da mesma maneira com n√∫meros complexos.
(3 + 4j) + 4  # sa√≠da: (7+4j)
# Inicialize uma vari√°vel a = 5j , comande type(a) e observe o retorno. # Resultado √© <class 'complex'>

# Al√©m dos tipos num√©ricos, temos o tipo de sequ√™ncia de texto str , que representa uma cadeia de caracteres ou, como popularmente conhecida, uma string. As strings s√£o definidas envolvendo um valor com aspas simples ou duplas.

# Os valores booleanos True e False pertencem ao tipo embutido bool . Aqui devemos ficar atentos ao in√≠cio mai√∫sculo dessas palavras reservadas.
# E temos ainda estruturas do tipo sequ√™ncia( list , tuple , range ), conjuntos( set , frozenset ), mapeamento( dict ), sequ√™ncias bin√°rias( bytes , bytearray , memoryview ) e mais um monte! üòì

fruits = ["orange", "apple", "grape", "pineapple"]  # elementos s√£o definidos separados por v√≠rgula, envolvidos por colchetes

fruits[0]  # o acesso √© feito por indices iniciados em 0

fruits[-1]  # o acesso tamb√©m pode ser negativo

fruits.append("banana")  # adicionando uma nova fruta

fruits.remove("pineapple")  # removendo uma fruta

fruits.extend(["pear", "melon", "kiwi"])  # acrescenta uma lista de frutas a lista original

fruits.index("apple")  # retorna o √≠ndice onde a fruta est√° localizada, neste caso 1 em seu programa

fruits.sort()  # ordena a lista de frutas ATEN√á√ÉO: O m√©todo sort com n√∫meros n√£o precisa da frescuragem do JS em n√∫meros acima de 9

trybe_course = ["Introdu√ß√£o", "Front-end", "Back-end"]
# üé® Fun√ß√µes e vari√°veis devem ser nomeadas com letras min√∫sculas e underscore, caso tenham mais de uma palavra: minha_variavel.

# Exerc√≠cio 5: Adicione o elemento "Ci√™ncia da Computa√ß√£o" √† lista.
print(trybe_course)
trybe_course.append("Ci√™ncia da Computa√ß√£o")
print(trybe_course)

# Exerc√≠cio 6: Acesse e altere o primeiro elemento da lista para "Fundamentos".
trybe_course[0] = "Fundamentos"
print(trybe_course)

# Tuplas (tuple)
# S√£o similares a listas, por√©m n√£o podem ser modificados durante a execu√ß√£o do programa.
# Sintaxe:
# Copiar
user = ("C√°ssio", "Botaro", 42)  # elementos s√£o definidos separados por v√≠rgula, envolvidos por parenteses

user[0]  # acesso tamb√©m por √≠ndices

# tentar reatribuir uma tupla acontece: user[0] = 'Sha' TypeError: 'tuple' object does not support item assignment

# Conjuntos (set)
# Conjunto de elementos √∫nicos e n√£o ordenados. Como conjuntos, implementam opera√ß√µes de uni√£o, intersec√ß√£o e outras.
# Sintaxe:

permissions = {"member", "group"}  # elementos separados por v√≠rgula, envolvidos por chaves

permissions.add("root")  # adiciona um novo elemento ao conjunto

permissions.add("member")  # como o elemento j√° existe, nenhum novo item √© adicionado ao conjunto

permissions.union({"user"})  # retorna um conjunto resultado da uni√£o, por√©m n√£o modifica permissions, devendo ser utilizado na atribui√ß√£o de novo conjunto

permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersec√ß√£o dos conjuntos, isto √©, verifica qual deles existem dentro de permissions

permissions.difference({"user"})  # retorna a diferen√ßa entre os dois conjuntos, isto √©, praticamente um filter !== "user"

# Exerc√≠cio 7: Um conjunto ou set pode ser inicializado utilizando-se tamb√©m o m√©todo set() . Inicialize uma vari√°vel com essa fun√ß√£o var = set() e adicione seu nome ao conjunto utilizando um dos m√©todos vistos acima. Depois, imprima a vari√°vel e confira se o retorno √©: {'seu_nome'}.
var = set()
var.add("John")
print(var) # Resultado = {'John'}

# Conjuntos imut√°veis (frozenset)
# Varia√ß√£o do set, por√©m imut√°vel, ou seja, seus elementos n√£o podem ser modificados durante a execu√ß√£o do programa, logo, n√£o existe .add e semelhantes
# Sintaxe:

imput_permissions = frozenset(["member", "group"])  # assim como o set, qualquer estrutura iter√°vel pode ser utilizada para criar um frozenset

imput_permissions.union({"user"})  # novos conjuntos imut√°veis podem ser criados √† partir do original, mas o mesmo n√£o pode ser modificado

imput_permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersec√ß√£o dos conjuntos

imput_permissions.difference({"user"})  # retorna a diferen√ßa entre os dois conjuntos

# Dicion√°rios (dict)
# Estrutura que associa uma chave a um determinado valor. √â a representa√ß√£o do t√£o famoso objeto que utilizamos em JavaScript.
# Sintaxe:

people_by_id = {1: "C√°ssio", 2: "Jo√£o", 3: "Felipe"}  # elementos no formato "chave: valor" separados por v√≠rgula, envolvidos por chaves

people_by_name = {"C√°ssio": 1, "Jo√£o": 2, "Felipe": 3}  # outro exemplo, dessa vez usando strings como chaves (ao contr√°rio de JS, as aspas duplas s√£o obrigat√≥rias)

# elementos s√£o acessados por suas chaves
people_by_id[1]  # sa√≠da: C√°ssio

# elementos podem ser removidos com a palavra chave del
del people_by_id[1]
people_by_id.items()  # dict_items([(1, "C√°ssio"), (2, "Jo√£o"), (3, "Felipe")])
# um conjunto √© retornado com tuplas contendo chaves e valores

info = {
  "personagem": "Margarida",
  "origem": "Pato Donald",
  "nota": "Namorada do personagem principal nos quadrinhos do Pato Donald",
}

# Em JavaScript, n√£o precis√°vamos colocar a chave do objeto entre aspas, por√©m, em Python, isso √© necess√°rio.
# Exerc√≠cio 8: O que acontecer√° se voc√™ tentar acessar o valor da chave "personagem" como faz√≠amos em JavaScript, utilizando object.key ?
# info.personagem resulta em AttributeError: 'dict' object has no attribute 'personagem', para acessar, √© necess√°rio info["personagem"]

# Exerc√≠cio 9: Insira no objeto uma nova propriedade com o nome de chave "recorrente" e o valor "Sim". Em seguida, imprima o objeto no console.
print(info)
info["recorrente"] = "sim"
print(info["recorrente"])

# Exerc√≠cio 10: Remova a propriedade cuja chave √© "origem" e imprima o objeto no console.
print(info)
del info["origem"]
print(info)

# Range (range)
# Estrutura capaz de gerar uma sequ√™ncia num√©rica de um valor inicial at√© um valor final, modificando seu valor de acordo com o passo ( step ) definido. Pode ser declarado como range( [start], stop[, step] ) , em que start e step podem ser omitidos, possuindo valores iniciais iguais a 0 e 1 respectivamente.
# Um ponto de aten√ß√£o √© que o stop n√£o √© inclu√≠do na sequ√™ncia, portanto caso queira uma sequ√™ncia de 1 at√© 10 a chamada dever√° ser range(1, 11)
# Seus valores s√£o criados a medida que esta sequ√™ncia √© percorrida.
# Sintaxe:

# vamos converter o range em uma lista para ajudar na visualiza√ß√£o

# definimos somente o valor de parada
list(range(5))  # sa√≠da: [0, 1, 2, 3, 4]

# definimos o valor inicial e o de parada
list(range(1, 6))  # sa√≠da: [1, 2, 3, 4, 5]

# definimos valor inicial, de parada e modificamos o passo para 2
list(range(1, 11, 2))  # sa√≠da: [1, 3, 5 ,7 , 9]

# podemos utilizar valores negativos para as entradas tamb√©m
list(range(10, 0, -1))  # sa√≠da: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
# üí° Al√©m dos tipos b√°sicos, temos outros como datas, tuplas nomeadas, arrays, enumera√ß√µes e outros, mas estes tem de ser importados de seus respectivos m√≥dulos.

# Exerc√≠cio 11: Ap√≥s uma consulta do banco de dados, temos linhas que cont√©m nome, sobrenome e idade como: "Thiago", "Nobre", 29 . Que estrutura vista anteriormente seria recomendada dado que ap√≥s esta consulta somente exibimos estes valores.
# A estrutura recomendada √© a tuple . Caso houvesse necessidade de editar os valores ou adicionar mais valores, usar√≠amos uma list .

# Exerc√≠cio 12: Realizar a contagem de quantas vezes cada elemento aparece em uma sequ√™ncia √© uma t√©cnica muito √∫til na solu√ß√£o de alguns problemas. Qual estrutura mais recomendada para armazenamento desta contagem?
# dict √© a estrutura mais adequada, pois conseguimos armazenar o elemento da lista como chave e a quantidade de vezes que ele aparece como valor da chave.
