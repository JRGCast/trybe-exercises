# Lidando com exce√ß√µes
# H√° pelo menos dois tipos de erros que podem ser destacados: erros de sintaxe e exce√ß√µes .
# Erros de Sintaxe
# Como n√≥s bem sabemos, erros de sintaxe ocorrem quando o c√≥digo utiliza recursos inexistentes da linguagem, que n√£o consegue interpret√°-lo. √â como chamar a fun√ß√£o primt em vez de print .
# Exce√ß√µes
# J√° as exce√ß√µes, ocorrem durante a execu√ß√£o e acabam resultando em mensagem de erro. Veja exemplos de exce√ß√µes:

# print(10 * (1 / 0))
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# ZeroDivisionError: division by zero
# print(4 + spam * 3)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'spam' is not defined
# print('2' + 2)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: can only concatenate str (not "int") to str
# Observe que, apenas no exemplo acima, podemos observar tr√™s exce√ß√µes: ZeroDivisionError , NameError e TypeError . A lista completa de exce√ß√µes j√° embutidas na linguagem pode ser vista aqui .
# Tratamento de exce√ß√µes
# Para tratarmos exce√ß√µes, utilizamos o conjunto de instru√ß√µes try , com as palavras reservadas try e except . O funcionamento dessa cl√°usula ocorre da seguinte forma:
# Se nenhuma exce√ß√£o ocorrer, a cl√°usula except √© ignorada, e a execu√ß√£o da instru√ß√£o try √© finalizada.
# Se ocorrer uma exce√ß√£o durante a execu√ß√£o da cl√°usula try , as instru√ß√µes remanescentes na cl√°usula s√£o ignoradas. Se o tipo da exce√ß√£o ocorrida tiver sido previsto em algum except , ent√£o essa cl√°usula ser√° executada.
# Se n√£o existir nenhum tratador previsto para tal exce√ß√£o, trata-se de uma exce√ß√£o n√£o tratada e a execu√ß√£o do programa termina com uma mensagem de erro.
# Vamos agora ver um exemplo de tratamento de exce√ß√µes:

while True:
    try:
        x = int(input("Please enter a number: "))
        break
    except ValueError:
        print("Oops!  That was no valid number.  Try again...")
# Cole o c√≥digo acima no terminal interativo e teste, na pr√°tica, como funciona o tratamento de exce√ß√µes.
# Lidando com exce√ß√µes enquanto manipulamos arquivos
# Agora cientes de como tratar exce√ß√µes, podemos nos previnir de poss√≠veis erros que ocorrem quando manipulamos arquivos. Sempre devemos fechar um arquivo e podemos, em um bloco try , fazer isso utilizando a instru√ß√£o finally ou else . O finally √© uma outra cl√°usula do conjunto try , cuja finalidade √© permitir a implementa√ß√£o de a√ß√µes de limpeza, que sempre devem ser executadas independentemente da ocorr√™ncia de a√ß√µes. J√° o else ocorre sempre que todo o try for bem sucedido.

try:
    arquivo = open("arquivo.txt", "r")
except OSError:
    # ser√° executado caso haja uma exce√ß√£o
    print("arquivo inexistente")
else:
    # ser√° executado se tudo ocorrer bem no try
    print("arquivo manipulado e fechado com sucesso")
    arquivo.close()
finally:
    # ser√° sempre executado, independentemente de erro
    print("Tentativa de abrir arquivo")
# Como estamos abrindo o arquivo em modo de leitura, caso ele n√£o exista, uma exce√ß√£o ser√° levantada, executando as cl√°usulas exception e finally . Entretanto se alterarmos o modo para escrita, o arquivo ser√° criado mesmo se inexistente, executando as cl√°usulas else e finally .
# Este padr√£o √© t√£o comum, n√£o s√≥ em arquivos como em outros recursos que devemos utilizar e liberar ao final, como conex√µes de banco de dados, por exemplo, que o Python tem um mecanismo pr√≥prio para lidar com isto.
# O with √© a palavra reservada para gerenciamento de contexto. Este gerenciamento ( with ) √© utilizado para encapsular a utiliza√ß√£o de um recurso, garantindo que certas a√ß√µes sejam tomadas independentemente se ocorreu ou n√£o um erro naquele contexto.
# A fun√ß√£o open retorna um objeto que se comporta como um gerenciador de contexto de arquivo que ser√° respons√°vel por abrir e fechar o mesmo. Isto significa que o arquivo possui mecanismos especiais que, quando invocados, utilizando with , alocam um determinado recurso, no caso um arquivo, e, quando o bloco for terminado, este recurso ser√° liberado.

# Criamos um contexto, limitando o escopo onde o arquivo est√° aberto.
# O uso do "as" aqui √© somente para atribuir o valor utilizado no contexto √† vari√°vel file
with open("arquivo1.txt", "w") as file:
    file.write("Michelle 27\n")
    print('arquivo1 criado e escrito com sucesso')
# como estamos fora do contexto, o arquivo foi fechado
print(file.closed)
# üí° J√° vimos a utiliza√ß√£o de gerenciadores de contexto em testes. L√°, capturamos exce√ß√µes que ocorrem e verificamos se naquele contexto a exce√ß√£o lan√ßada era a esperada. N√£o h√° um recurso a ser liberado, mas estamos garantindo que uma asser√ß√£o ser√° feita naquele contexto.
# Vamos praticar um pouco?

# Exerc√≠cio 3: Dado um arquivo contendo estudantes e suas respectivas notas, escreva um programa que l√™ todas essas informa√ß√µes e filtre mantendo somente as pessoas que est√£o reprovadas, e escreva seus nomes em outro arquivo. A nota min√≠ma para aprova√ß√£o √© 6.
# Arquivo:
# Copiar
# Marcos 10
# Felipe 4
# Jos√© 6
# Ana 10
# Maria 9
# Miguel 5
# Exemplo sa√≠da:
# Copiar
# Felipe
# Miguel
# ü¶ú A fun√ß√£o split pode ser utilizada para dividir o nome em uma linha. Ex: line.split -> ["Marcos", "10"]

alunos = ['Marcos 10', 'Felipe 4', 'Jos√© 6', 'Ana 10', 'Maria 9', 'Miguel 5']

with open("alunos.txt", "w") as file:
  for aluno in alunos:
    file.write(f'{aluno}\n')
print('Alunos.txt criado e escrito com sucesso')
print(file.closed)

recSt = []
with open("alunos.txt", "r") as reading: 
  for row in reading:
    splited = row.split(" ")
    student, grade = splited
    if int(grade) < 6:
      phrase = f"{student} est√° de recupera√ß√£o teve nota {grade}"
      recSt.append(phrase)
print(recSt)

with open("recAlunos.txt", "w") as recAl:
  recAl.writelines(recSt)
print(reading.closed)
